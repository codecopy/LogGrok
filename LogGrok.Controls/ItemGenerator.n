using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;

namespace LogGrok.Controls
{
    internal class ItemGenerator : IDisposable
    {
        public this(itemContainerGenerator : ItemContainerGenerator, direction : GeneratorDirection)
        {
            _itemContainerGenerator = itemContainerGenerator;
            _batches = itemContainerGenerator.GenerateBatches();
            _direction = direction;
        }

        public GenerateNext(currentIndex : int, isNewlyRealized : out bool) : DependencyObject
        {
            def supposedPrevIndex = if (_direction == GeneratorDirection.Forward)
                                        currentIndex - 1
                                       else
                                        currentIndex + 1;
            if (currentIndex < 0)
            {
                isNewlyRealized = false;
                null;
            }
            else
            {
                match (_lastIndex)
                {
                    | None
                    | Some(index) when index != supposedPrevIndex =>
                            when (_generatorState != null) _generatorState.Dispose();
                            def generatorPosition = _itemContainerGenerator.GeneratorPositionFromIndex(currentIndex);
                            _generatorState = _itemContainerGenerator.StartAt(generatorPosition, _direction, true);
                    | _ => ()
                }


                def result = _itemContainerGenerator.GenerateNext(out isNewlyRealized);
                when (result != null) _lastIndex = Some(currentIndex);
                result
            }
        }

        public Dispose() : void
        {
            when (_generatorState != null) _generatorState.Dispose();
            _batches.Dispose();
        }
        
        private _itemContainerGenerator : IItemContainerGenerator;
        private _batches : IDisposable;
        private mutable _generatorState : IDisposable;
        private mutable _lastIndex : option[int] = None();
        private _direction : GeneratorDirection;
    }
}