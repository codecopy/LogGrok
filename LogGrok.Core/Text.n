using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;

using LogGrok.Unsafe;

namespace LogGrok.Core
{
    public abstract class Text : IComparable, IComparable[Text]
    {
        public static Empty : Text
        {
            get
            {
                _empty
            }
        }
        
        public abstract GetHashCode() : int;
        
        public abstract Equals(other : object) : bool;
        
        public virtual CompareTo(obj : Text) : int 
        {
            this.ToString().CompareTo(obj.ToString())
        }
        
        public NonGenericCompareTo(obj : object) : int 
                            implements IComparable.CompareTo
        {
            | text is Text => this.ToString().CompareTo(text.ToString())
            | _ => throw ArgumentException("Cannot compare $obj to Text");
        }

        private static _empty : Text = Text8(0, 0, array(0));
    }
    
    [Record]
    public class StringText : Text 
    {
        public override GetHashCode() : int
        {
            _str.GetHashCode(_begin, _len)
        }
        
        public override Equals(other : object) : bool
        {
            match(other)
            {
                | s is StringText when _len == s._len => 
                    ByteArrayTools.FastEquals(_str, _begin, s._str, s._begin, _len) 
                | _ => false
            }
        }

        public override ToString() : string
        {
            _str.Substring(_begin, _len)
        }
        
        private _str : string ;
        private _begin : int;
        private _len : int;
    }
    
    [Record]
    public class ByteText  : Text
    {
        public Length : int
        {
            get
            {
                _end - _start;
            }
        }
        
        public override GetHashCode() : int 
        {
            _buffer.GetModifiedFNVHash(_start, _end - _start)
        }
        
        public override Equals(other : object) : bool
        {
            | otherText is ByteText =>
            {
                if (Length != otherText.Length)
                    false
                else
                {
                    if (Length == 0) 
                        true 
                    else
                        ByteArrayTools.FastEquals(_buffer, _start, otherText._buffer, otherText._start, Length);
                }
            }
            | _ => false
        }
                
        public override CompareTo(obj : Text) : int 
        {
            this.ToString().CompareTo(obj.ToString())
        }
        
        public override ToString() : string
        {
            throw InvalidOperationException()
        }
        
        protected ToString(encoding : System.Text.Encoding) : string
        {
            encoding.GetString(_buffer, _start, _end - _start);
        }
        
        private static _empty : Text = Text8(0, 0, array(0));
        
        private _start : int;
        private _end   : int;
        private _buffer : array[byte];
    }
    
    public class TextWithCopy : ByteText, IComparable, IComparable[Text]
    {
        protected this(start : int, end : int, buffer : array[byte])
        {
            unchecked
            {
                Buffer = array(end - start);
                Buffer.BlockCopy(buffer, start, Buffer, 0, end - start);
                
                base(0, Buffer.Length, Buffer)
            }
        }      
        
       
        protected Buffer : array[byte];
        
        
                
        public override ToString() : string
        {
            throw InvalidOperationException()
        }
        
        private static _empty : Text = Text8(0, 0, array(0));
        
    }
}
