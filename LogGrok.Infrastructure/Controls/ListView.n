using Nemerle;
using Nemerle.Extensions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nemerle.WPF;

using System;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;

using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Input;
using System.Windows.Threading;

using LogGrok.Controls;
using LogGrok.Diagnostics;
using LogGrok.Infrastructure.Controls;
using LogGrok.Macros.Diagnostics;

namespace LogGrok.Infrastructure
{
    public class ListView : System.Windows.Controls.ListView
    {
        public this()
        {
            base();       

            def DoCopy(_, _)
            {
                CopySelectedItemsToClipboard();
            }

            def CanCopy(_, e : CanExecuteRoutedEventArgs )
            {
                e.CanExecute = !SelectedItems.IsEmpty();
                e.Handled = true;
            }

            _ = this.CommandBindings.Add(
                CommandBinding(ApplicationCommands.Copy, DoCopy, CanCopy));

            Loaded +=  _ => ResetColumnsWidth();
        }
        
        [DependencyProperty]
        public ReadOnlySelectedItems : IEnumerable { get; set }

        [DependencyProperty(Metadata=PropertyMetadata(Enumerable.Empty.[int](), OnSelectedIndexesChanged))]
        public SelectedIndexes : IEnumerable[int] { get; set; }
        
        public event SelectedIndexesChanged : Action;
        
        public new event KeyDown : KeyEventHandler;
        
        public BringIndexIntoView(position : int) : void
        {
            GetPanel().BringIndexIntoViewPublic(position)
        }
        
        public BringIndexIntoViewWhileNavigatingDown(index : int) : void
        {
            GetPanel().BringIndexIntoViewWhileNavigatingDown(index);
        }

        protected override ClearContainerForItemOverride(_ : DependencyObject, _ : object) : void
        {}
        
        protected override OnKeyDown(e : KeyEventArgs) : void
        {
            def handler = KeyDown;
            unless (handler == null) KeyDown(this, e);
            
            unless (e.Handled) 
            base.OnKeyDown(e);
        }
        
        protected override OnItemsSourceChanged(oldValue : IEnumerable, newValue : IEnumerable) : void
        {
            base.OnItemsSourceChanged(oldValue, newValue);
            
            if (newValue == null)
            {
                _storedItemCount = 0;
            }
            else
            {
                when (newValue.Cast.[object]().Any())
                    ResetColumnsWidth();
                
                _storedItemCount = this.Items.Count;
            }
        }
        
        protected override OnItemsChanged(e : NotifyCollectionChangedEventArgs ) : void
        {
            match(e.Action)
            {
                | NotifyCollectionChangedAction.Reset => ()
                | _                                   => base.OnItemsChanged(e);
            }
            
            when (_storedItemCount == 0 && this.Items.Count > 0)
                ResetColumnsWidth();
            _storedItemCount = this.Items.Count;

        }

        protected override OnSelectionChanged(_ : SelectionChangedEventArgs) : void
        {
            ReadOnlySelectedItems = SelectedItems;
        }

        private static OnSelectedIndexesChanged(_ : DependencyObject, _ : DependencyPropertyChangedEventArgs) : void
        {
            | (lv is ListView, _) =>
            
                def handler = lv.SelectedIndexesChanged;
                unless (handler == null) handler();
            | _ => ()
        }
        
        [Memoize(InvalidValue = null)]
        private GetPanel() : LogGrok.Controls.VirtualizingStackPanel
        {
            VisualTreeWalker.GetVisualChildren.[LogGrok.Controls.VirtualizingStackPanel](this).FirstOrDefault()
        }
        
        private ResetColumnsWidth() : void
        {
            def CalculateRemainingSpace(gridView)
            {
                when (ActualWidth == Double.NaN)
                    Measure(Size(Double.PositiveInfinity, Double.PositiveInfinity));
                    
                ActualWidth - gridView.Columns.Take(gridView.Columns.Count - 1).Sum(c => c.ActualWidth) - SystemParameters.ScrollWidth * 2;

            }
              
            def UpdateLastColumnWidth(view)
            {
                def lastColumn = view.Columns.Last();
                def remainingSpace = CalculateRemainingSpace(view);
                when (lastColumn.ActualWidth < remainingSpace)
                    lastColumn.Width = remainingSpace;                
            }
                      
            def ResetWidth(view)
            {
                foreach (column in view.Columns.Take(view.Columns.Count - 1))
                {
                                
                    column.Width = 1;
                    column.ClearValue(GridViewColumn.WidthProperty);
                }
                _ = this.Dispatcher.BeginInvoke(Action(() => UpdateLastColumnWidth(view)), DispatcherPriority.ApplicationIdle);
            }

            match(View)
            {
                | view is GridView => 
                    {
                        _ = this.Dispatcher.BeginInvoke(Action(() => ResetWidth(view)), DispatcherPriority.ApplicationIdle);
                    }
                | _ => ()
            }
        }

        private CopySelectedItemsToClipboard() : void
        {
            def items =  SelectedIndexes.OrderBy(i => i).Select(i => Items[i]);
            
            def text = StringBuilder();
            foreach (line in items)
            {
                _ = text.Append(line);
                _ = text.Append("\r\n");
            }
            _ = text.Replace("\0", string.Empty);            
            System.Windows.Clipboard.SetText(text.ToString());
        }

        private mutable _storedItemCount : int;        
    }
}
