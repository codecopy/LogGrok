using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.WPF;

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;

using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Media;
using System.Text.RegularExpressions;

using LogGrok.Macros;

using System.Windows.FrameworkPropertyMetadataOptions;

namespace LogGrok.Controls
{
    public class HighlightedTextBlock : Control
    {
        [DependencyProperty(IsAttached, Metadata=FrameworkPropertyMetadata(null, Inherits | AffectsRender))]
        public static GetHighlightRegex(d : DependencyObject) : Regex;

        [DependencyProperty(Metadata=FrameworkPropertyMetadata(string.Empty, AffectsMeasure | AffectsRender))]
        public Text : string { get; set; }

        protected override MeasureOverride(_: Size) : Size
        {
            def formattedText = GetFormattedText();
            MeasureOverrideCore(formattedText);
            
        }
        
        [CacheLastResult]
        private MeasureOverrideCore(formattedText : FormattedText) : Size
        {
            Size(formattedText.Width, formattedText.Height)
        }
        
        protected override ArrangeOverride(finalSize : Size) : Size
        {
            finalSize
        }

        protected override OnRender(drawingContext : DrawingContext) : void 
        {
            when (Background != null)
                drawingContext.DrawRectangle(Background, Pen(Background, 0), Rect(0, 0, ActualWidth, ActualHeight));
                
            foreach(highlighting in GetDrawingGeometries(Text, GetHighlightRegex(this)))
            {
                drawingContext.DrawGeometry(Brushes.Moccasin, Pen(Brushes.Moccasin, 0), highlighting);
            }
                
            drawingContext.DrawText(GetFormattedText(), Point(0, 0));
        }
        
        [CacheLastResult]
        private GetDrawingGeometries(text: string, regex : Regex) : IEnumerable[Geometry]
        {
            if (string.IsNullOrEmpty(text) || regex == null)
            {
                Enumerable.Empty()
            }
            else
            {
                def matchs = regex.Matches(Text).Cast.[Match]().ToList();
                matchs .Select(
                    mtch => 
                        { 
                            def ft = GetFormattedText();
                            def geometry = ft.BuildHighlightGeometry(Point(0,0), mtch.Index, mtch.Length): Geometry;
                            geometry;
                            
                        });
            }
        }
        
        private GetFormattedText() : FormattedText
        {
            GetFormattedText(Text, FlowDirection, FontFamily, FontStyle, FontWeight, FontStretch, FontSize, Foreground)
        }
        
        [CacheLastResult]
        private GetFormattedText(value : string, flowDirection : FlowDirection, fontFamily : FontFamily, fontStyle : FontStyle, fontWeight : FontWeight, fontStretch : FontStretch, fontSize : double, foreground : Brush) : FormattedText 
        {
            FormattedText(if(value == null) string.Empty else value, 
                            CultureInfo.CurrentUICulture,
                            flowDirection,
                            Typeface(fontFamily, fontStyle, fontWeight, fontStretch),
                            fontSize,
                            Foreground, 
                            null,
                            TextFormattingMode.Display);
        }

    }
}
