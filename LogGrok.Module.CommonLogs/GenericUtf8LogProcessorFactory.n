using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using Microsoft.Practices.Unity;
using System.IO;

using LogGrok.Core;
using LogGrok.LogParserBase;

namespace LogGrok.Module.CommonLogs
{
    [Record]
    internal class GenericUtf8LogProcessorFactory : BaseLogProcessorFactory
    {
        public override Create([NotNullOrEmpty] name : string, [NotNull] streamFactory : void -> Stream, [NotNull] container : IUnityContainer,
                               startOffset : long, endOffset : long) : option[ILogProcessor*MetaInformation]
        {
            try
            {
                def processor = LogProcessor(name, streamFactory, GenericUtf8LineReader, FileSearcher.GetOffsetsWithUtf8Text, _ => None(), container, 
                                             startOffset, endOffset);
                
                Some((processor, MetaInformation))
            }
            catch 
            {
                | _ => None()
            }
        }

        public static MetaInformation : MetaInformation = CreateMetaInformation(
            "Generic utf8 trace",
            GenericUtf8LineReader.GetFields(),
            Uri($"pack://application:,,,/$(typeof(GenericUtf8LogProcessorFactory).Assembly.GetName().Name);component/resources/GenericUTF8Colors.json"));
    }
}
