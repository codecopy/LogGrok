using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.WPF;

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Threading;
using System.Text.RegularExpressions;
using System.Windows.Input;

using LogGrok.LogView;
using LogGrok.Core;

using Microsoft.Practices.Prism.Commands;
using Microsoft.Practices.Prism.PubSubEvents;

using LogGrok.FilterManager;
using LogGrok.LogView.DataVirtualization;
using LogGrok.Macros;

#pragma warning disable 10003

namespace LogGrok.Search
{    
    [NotifyPropertyChanged]
    internal class SearchViewModel : IDataErrorInfo
    {
        public this([NotNull] searchDocumentFactory : SearchDocumentFactory, [NotNull] highlighter : ILogHighlight)
        {
            _highlighter = highlighter;
            _searchDocumentFactory = searchDocumentFactory;
            Documents = ObservableCollection();
        }        

        public SearchText : string
        {
            get
            {
                _searchPatternCurrentlyEditing.Text
            }

            set 
            {
                when (_searchPatternCurrentlyEditing.Text != value)
                {
                    _searchPatternCurrentlyEditing.Text = value;
                    CommitSearchPattern();
                }
            }
        }

        public IsCaseSensitive : bool 
        {
            get
            {
                _searchPatternCurrentlyEditing.CaseSensitive
            }

            set
            {
                when (_searchPatternCurrentlyEditing.CaseSensitive != value)
                {
                    _searchPatternCurrentlyEditing.CaseSensitive = value;
                    CommitSearchPatternImmediately();
                }
            }
        }

        public UseRegex : bool
        {
            get
            {
                _searchPatternCurrentlyEditing.UseRegex
            }

            set
            {
                when(_searchPatternCurrentlyEditing.UseRegex != value)
                {
                    _searchPatternCurrentlyEditing.UseRegex = value;
                    CommitSearchPatternImmediately();
                }
            }
        }


        [Throttle(TimeSpan.FromMilliseconds(500))]
        private CommitSearchPattern() : void
        {
            CommitSearchPatternImmediately()
        }

        private CommitSearchPatternImmediately() : void
        {
            def searchPatternToCommit = _searchPatternCurrentlyEditing; 
            _searchPatternCurrentlyEditing = SearchPattern(SearchText, IsCaseSensitive, UseRegex);
            
            when (searchPatternToCommit.IsValid)
            {
                if (CurrentDocument != null)
                {
                    CurrentDocument.SetSearchPattern(searchPatternToCommit);
                }
                else
                {
                    def newDocument = _searchDocumentFactory.Create();
                    newDocument.SetSearchPattern(searchPatternToCommit);
                    Documents.Add(newDocument);
                    CurrentDocument = newDocument;
                }
                
                _highlighter.SetTextForHighlight(searchPatternToCommit.Text, searchPatternToCommit.GetSearchOptions());
                IsFilterEnabled = !searchPatternToCommit.Text.IsEmpty();
            }
        }

        private mutable _currentDocument : SearchDocument;

        public IsFilterEnabled : bool
        {
            get; set;
        }

        [NotifyChangedOptions(Dependent = [SearchText, IsCaseSensitive, UseRegex])]
        public CurrentDocument : SearchDocument
        {
            get 
            { 
                _currentDocument; 
            }
            
            set 
            { 
                _currentDocument = value;
                
                _searchPatternCurrentlyEditing = SearchPattern(value.SearchText, value.UseRegex, value.IsCaseSensitive);
                _highlighter.SetTextForHighlight(_searchPatternCurrentlyEditing.Text, _searchPatternCurrentlyEditing.GetSearchOptions());
            }
        }

        public Documents : ObservableCollection[SearchDocument] { get; private set; }

        public AddNewSearch : ICommand
        {
            get
            {
                DelegateCommand(() =>
                {
                    def newDocument = _searchDocumentFactory.Create();
                    newDocument.SetSearchPattern(_searchPatternCurrentlyEditing);
                    Documents.Add(newDocument);
                    CurrentDocument = newDocument;
                })
            }
        }

        public ClearSearchCommand : ICommand
        {
            get
            {
                DelegateCommand(() => { SearchText = string.Empty; CommitSearchPatternImmediately(); })
            }
        }

        public CloseDocument : ICommand
        {
            get 
            {
                DelegateCommand(d : SearchDocument =>
                {
                    d.Dispose();
                    when (Documents.Count == 0)
                    {
                        SearchText = string.Empty;
                        CurrentDocument = null;
                    }
                })
            }
        }

        public Item[propertyName : string] : string
        {
            get 
            { 
                if (propertyName == "SearchText")
                    _searchPatternCurrentlyEditing.ValidationError;
                else
                    string.Empty;
            }
        }

        public Error : string
        {
            get { string.Empty }
        }

        private _searchDocumentFactory : SearchDocumentFactory;
        private _highlighter : ILogHighlight;

        private mutable _searchPatternCurrentlyEditing : SearchPattern = SearchPattern(string.Empty, false, false);
    }
}
