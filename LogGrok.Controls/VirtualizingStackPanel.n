using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;
using Nemerle.WPF;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Media;

using LogGrok.Macros;

namespace LogGrok.Controls
{
	public class VirtualizingStackPanel : VirtualizingPanel, IScrollInfo
	{
		public this()
		{
			RenderTransform = _trans;

			this.Loaded += (_, _) =>
			    ItemsControl.GetItemsOwner(this).Items.CurrentChanged += OnCurrentItemChanged;
		}
		
		protected override MeasureOverride(availableSize : Size) : Size
		{
			UpdateExtent();
			def count = ItemsControl.GetItemsOwner(this).Items.Count;
			MeasureOverrideCore(availableSize, VerticalOffset, count);
		}
		
		protected override ArrangeOverride(finalSize : Size) : Size 
		{
			def firstVisibleIndex = Math.Floor(VerticalOffset) :>int; 

			def (elementsBefore, visibleElements) = _visibleElements.Partition(item => item.Index < firstVisibleIndex);
			
			def renderOffset =
			    match(visibleElements)
			    {
			        | VisibleItem(firstItem, firstIndex, _, _) :: _ => 
			                (firstIndex - VerticalOffset) * firstItem.DesiredSize.Height;
			        | _ => 0
			    };			

			_trans.Y = renderOffset;                
			mutable offset = 0.0;
			mutable itemOffsets = [];

			foreach(visibleItem in visibleElements)
			{
			    def item = visibleItem.Element;
			    def top = visibleItem.UpperBound - renderOffset;
			    def bottom = visibleItem.LowerBound - renderOffset;
			    
				def childRect = Rect(0, top, _extent.Width, bottom - top);
				item.Arrange(childRect);
			}
			
			itemOffsets = visibleElements.Map(item => (item.Index, item.UpperBound, item.LowerBound));

			offset = 0.0;

			foreach(VisibleItem(item, index, _, _) in elementsBefore.Reverse())
			{
				def height = item.DesiredSize.Height;
				def childRect = Rect(0, offset- height, _extent.Width, height);
				item.Arrange(childRect);

				def newOffset = offset - height;
				itemOffsets = (index, newOffset + renderOffset, offset + renderOffset) :: itemOffsets;

				offset = newOffset;
			}

			def screenBound = finalSize.Height;

			def onScreenCount = _visibleElements
			                  .Map(v => (v.UpperBound, v.LowerBound))
							  .FindAll((upOffset, downOffset) => 
				                    GreaterOrEquals(downOffset, 0.0) && LessOrEquals(upOffset, screenBound))
							  .Map((min,max) => (Math.Min(max, screenBound) - Math.Max(min, 0.0)) / (max - min))
							  .Sum();

			UpdateViewPort(finalSize, onScreenCount);

			finalSize
		}

		private OnCurrentItemChanged(_ : object, _ : EventArgs) : void 
		{
		    def items = ItemsControl.GetItemsOwner(this).Items;
		    def position = items.CurrentPosition;
		    def visibleCurrentItem = _visibleElements.Find(v => v.Index == position);
		    match(visibleCurrentItem)
		    {
		        | Some(VisibleItem(_, _, upper, lower)) => _currentItemOffset = (upper + lower) / 2;
		        | _ => ()
		    }
		}

        [CacheLastResult]
		private MeasureOverrideCore(availableSize : Size,  verticalOffset : double, itemsCount : int) : Size
		{
		    def firstVisibleItemIndex = Math.Floor(verticalOffset) :> int;
			def startOffset = firstVisibleItemIndex - verticalOffset;
			                  
		    def (visibleElements, itemsToRecycle) =
		        GenerateItemsDownWithRelativeOffset(startOffset, firstVisibleItemIndex, availableSize.Height, _visibleElements.Reverse());
		    
			_visibleElements = visibleElements.Sort((v1, v2) => v1.Index - v2.Index);

			def realized = HashSet(_visibleElements.Map(v=> v.Element));
            foreach(item in itemsToRecycle.Filter(i => !realized.Contains(i.Element)))
				RecycleItem(item.Element);

			for (mutable i = InternalChildren.Count - 1; i >= 0; i--)
			{
				def item = InternalChildren[i];
				when(_recycled.Contains(item))
				{
					RemoveInternalChildRange(i, 1);
                }
			}

			CleanUpItems();

			if (availableSize.Height == Double.PositiveInfinity) Size(1,1) else availableSize
		}
   
        private GenerateItemsDown(startOffset : double, startIndex : int, heightToBuild : double, itemsToRecycle : list[VisibleItem]) : list[VisibleItem] * list[VisibleItem]
        {
            def processItem(index : int, item : UIElement, offset)
            {
                def newOffset = offset + item.DesiredSize.Height;
                def visibleItem = VisibleItem(item, index, offset, newOffset);
                def finish = GreaterOrEquals(newOffset, heightToBuild);
                (!finish, visibleItem, newOffset)
            }
            
            GenerateItems(startIndex, GeneratorDirection.Forward, processItem, startOffset, itemsToRecycle)
        }
        
        private GenerateItemsDownWithRelativeOffset(relativeOffset : double, startIndex : int, heightToBuild : double, itemsToRecycle : list[VisibleItem]) : list[VisibleItem] * list[VisibleItem]
        {
            def processItem(index : int, item : UIElement, offset)
            {
                def newOffset = offset + item.DesiredSize.Height;
                def visibleItem = VisibleItem(item, index, offset, newOffset);
                (false, visibleItem, newOffset)
            }
            
            def (newItems, rest) = GenerateItems(startIndex, GeneratorDirection.Forward, processItem, 0.0, itemsToRecycle);
            match (newItems)
            {
                | [item] =>
                    def movedItem = item.Move(item.Height*relativeOffset);
                    def (generated, rest) = GenerateItemsDown(movedItem.LowerBound, startIndex + 1, heightToBuild, rest);
                    (movedItem :: generated, rest)
                    
                | _ => ([], itemsToRecycle)
            }
        }
        
		private GenerateItemsUp(startOffset : double, startIndex : int, heightToBuild : double, itemsToRecycle : list[VisibleItem]) : list[VisibleItem] * list[VisibleItem]
		{
            def processItem(index, item, offset)
			{
			    def newOffset = offset - item.DesiredSize.Height;
	            def visibleItem = VisibleItem(item, index, newOffset, offset);
	            def finish = GreaterOrEquals(-newOffset, heightToBuild);
	            (!finish, visibleItem, newOffset)
			}

            GenerateItems(startIndex, GeneratorDirection.Backward, processItem, startOffset, itemsToRecycle.Reverse());
		}

		private static epsilon = 0.00001;

		private static Less(d1 : double, d2 : double) :bool
		{
			d1 + epsilon < d2 
		}

		private static Greater(d1 : double, d2 : double) :bool
		{
			d1 > d2 + epsilon
		}

		private static GreaterOrEquals(d1 : double, d2 : double) : bool
		{
            !Less(d1, d2)
		}

		private static LessOrEquals(d1 : double, d2 : double) : bool
		{
            !Greater(d1, d2)
		}

		protected override BringIndexIntoView(index : int) : void
		{
			def screenBound = this.ActualHeight;
			def onScreen = _visibleElements
						 .Find(v => v.Index == index 
						    && GreaterOrEquals(v.UpperBound, 0.0) 
						    && LessOrEquals(v.LowerBound, screenBound));

            when (onScreen.IsNone)
    			SetVerticalOffset(index);
		}
		
		public BringIndexIntoViewWhileNavigatingDown(index : int) : void
		{
			def screenBound = this.ActualHeight;
			def existed = _visibleElements.Find(v => v.Index == index);
 
			match (existed)
			{
			| Some(visibleElement) when visibleElement.LowerBound > screenBound => 
			            ScrollDown(visibleElement.LowerBound- screenBound)
			| Some => ()
			| None when _visibleElements.Max(_.Index) == index - 1 => 
				def (result, _) =  
				    GenerateItems(index, GeneratorDirection.Forward, (_, uielement, _) => (false, uielement, null), None(), []);
                match (result)
                {
	            | [item] => ScrollDown(item.DesiredSize.Height)
	            | _ => ()
                }
            | None => SetVerticalOffset(index)
			};
		}
			
		private GenerateItems[T, U](startIndex : int, direction : GeneratorDirection, process : (int * UIElement * U) -> (bool * T * U), startState : U, itemsToRecycle : list[VisibleItem]) : list[T]*list[VisibleItem]
		{
		    def totalItemCount = ItemsControl.GetItemsOwner(this).Items.Count;
		    
			using (def itemGenerator = ItemGenerator(ItemContainerGenerator :> ItemContainerGenerator, direction))
			{
                def generator(index, realizedItems, resultList, state, itemsToRecycle)
                {
                    if (index >= totalItemCount) 
                        (resultList, itemsToRecycle)
                    else
                    {
                        def (itm, newItemsToRecycle) = GenerateNextItem(itemGenerator, index, realizedItems, itemsToRecycle);
                        match(itm)
                        {
                        | None => (resultList, newItemsToRecycle)
                        | Some(itm) =>
                            match(process(index, itm, state))
                            {       
                            | (true, result, newState) =>
                                def nextIndex = if (direction == GeneratorDirection.Forward) index + 1 else index - 1;
                                generator(nextIndex, (index, itm)::realizedItems, result::resultList, newState, newItemsToRecycle)
                            | (false, result, _) => (result::resultList, newItemsToRecycle)
                            }
                        }
                    }
                }
                generator(startIndex, [], [], startState, itemsToRecycle)
			}
		}

		private GenerateNextItem(itemGenerator : ItemGenerator, index : int, realizedItems : list[int*UIElement], itemsToRecycle : list[VisibleItem]) : option[UIElement]*list[VisibleItem]
		{
			def RecycleItemIfNeeded(items : list[VisibleItem], alreadyRealized : list[int*UIElement])
			{
				match(_recycled.IsEmpty(), items)
				{
					| (false, _)    => items;
					| (_, VisibleItem(h, _, _, _) :: tail)   => 
							if (alreadyRealized.Any((_,i)  => object.ReferenceEquals(i, h))) 
							    RecycleItemIfNeeded(tail, alreadyRealized) 
							else 
							{ RecycleItem(h); tail }
					| _                     => []
				};
			}
            
			def (item, isNewItem, newItemsToRecycle) =
			    match(itemsToRecycle.Find(v => v.Index== index))
			    {
			        | Some(VisibleItem(item, _, _, _)) => 
			            (item, false, itemsToRecycle.Filter(v => !object.ReferenceEquals(v.Element, item)))
			        | _ =>
			            def newItemsToRecycle = RecycleItemIfNeeded(itemsToRecycle, realizedItems);
			            mutable isNewItem;
			            def item = itemGenerator.GenerateNext(index, out isNewItem) :> UIElement;
			            (item, isNewItem, newItemsToRecycle)
			    };
			
			if (item == null)
			    (None(), newItemsToRecycle)
			else
			{
				InsertAndMeasureItem(item, index, _recycled.Contains(item), isNewItem);
				(Some(item), newItemsToRecycle)
			}
		}

		private InsertAndMeasureItem(item : UIElement, itemIndex : int, isRecycled : bool, isNewElement: bool) : void
		{
			when (!InternalChildren.Cast.[UIElement]().Contains(item))
			InsertInternalChild(InternalChildren.Count, item);

			def UpdateItem(item)
			{
				def context = Items[itemIndex];
				when (item.DataContext != context || item.Content != context)
				{
					item.DataContext = context;
					item.Content = context;
					when(item.IsSelected) item.IsSelected = false;
					item.InvalidateMeasure();
					foreach(item in item.GetVisualChildren.[UIElement]())
					{
						item.InvalidateMeasure();
					}
				}
			}

			match(item, isRecycled, isNewElement)
			{
				| (item is ListViewItem, true, _) =>
							_ = _recycled.Remove(item);
							UpdateItem(item);
				| (item, _, true) => 
							_recycled.Clear();
							ItemContainerGenerator.PrepareItemContainer(item);
				| (item is ListViewItem, false, false) => UpdateItem(item)    
				| _ => ()
			}

			item.Measure(Size(Double.PositiveInfinity, Double.PositiveInfinity));
		}

		private Items[index : int] : object
		{
			get
			{
				ItemsControl.GetItemsOwner(this).Items[index]
			}
		}

		private ItemContainerStyle : Style
		{
			get
			{
				match(ItemsControl.GetItemsOwner(this))
				{
					| l is ListView => l.ItemContainerStyle
					| _ => null
				}
			}
		}

		private new ItemContainerGenerator : IItemContainerGenerator
		{
			get
			{
				when (base.ItemContainerGenerator == null) _ = base.InternalChildren;
				base.ItemContainerGenerator
			}
		}

		private RecycleItem(item : UIElement) : void
		{
			def generator = this.ItemContainerGenerator :> ItemContainerGenerator;
			def visualChildIndex = generator.IndexFromContainer(item);
			def childGeneratorPos = ItemContainerGenerator.GeneratorPositionFromIndex(visualChildIndex);

			when (childGeneratorPos.Index >= 0)
                (ItemContainerGenerator :> IRecyclingItemContainerGenerator).Recycle(childGeneratorPos, 1);

			_ = _recycled.Add(item);
		}

		private CleanUpItems() : void 
		{
			def children = this.InternalChildren;
			def generator = this.ItemContainerGenerator :> ItemContainerGenerator;

			mutable from;
			mutable count;

			def RemoveRange()
			{
				when(count !=0)
				{
					this.RemoveInternalChildRange(from, count); 
					count = 0;
				}
			}

			for (mutable i = children.Count - 1; i >= 0; i--)
			{
				def visualChild = children[i];
				def visualChildIndex = generator.IndexFromContainer(visualChild);
				def childGeneratorPos = ItemContainerGenerator.GeneratorPositionFromIndex(visualChildIndex);

				def itemIndex = ItemContainerGenerator.IndexFromGeneratorPosition(childGeneratorPos);

				def item= _visibleElements.FirstOrDefault(v => object.ReferenceEquals(v.Element, visualChild));
				if (item == null)
				{
					when(itemIndex > 0)
					{
                        (generator : IRecyclingItemContainerGenerator).Recycle(childGeneratorPos, 1);
						_ = _recycled.Add(InternalChildren[i]);
					}

					from = i;
					count ++;
				}
				else
				{
					RemoveRange();
				}
			}

			RemoveRange();
		}

		public CanHorizontallyScroll : bool { get; set; } 

		public CanVerticallyScroll : bool { get; set; } 

		public ExtentHeight : double
		{
			get{ _extent.Height }
		}

		public ExtentWidth : double
		{
			get{ _extent.Width }
		}

		public HorizontalOffset : double
		{
			get{ _offset.X }
		}

		private static ScrollUnit : double = 20;

		public LineDown() : void
		{ 
		    SetVerticalOffset(VerticalOffset + ScrollUnit);
		}
		    
		public LineLeft() : void
		{ 
			SetHorizontalOffset(HorizontalOffset - _viewPort.Width / 2); 
		}

		public LineRight() : void
		{ 
			SetHorizontalOffset(HorizontalOffset + _viewPort.Width / 2); 
		}

		public LineUp() : void
		{ 
			SetVerticalOffset(VerticalOffset - ScrollUnit);
		}

		public MakeVisible(_ : System.Windows.Media.Visual, _: System.Windows.Rect) : System.Windows.Rect
		{
			Rect()
		}

		public MouseWheelDown() : void
		{ 
			ScrollDown(ScrollUnitPixels)
		}

		public MouseWheelLeft() : void
		{ 
			SetHorizontalOffset(HorizontalOffset - _viewPort.Width / 2.0); 
		}

		public MouseWheelRight() : void
		{ 
			SetHorizontalOffset(HorizontalOffset + _viewPort.Width / 2.0); 
		}

		public MouseWheelUp() : void
		{ 
			ScrollUp(ScrollUnitPixels);
		}
		
		public PageUp(changeCurrentItemOnPageChange : bool) : void
		{
		    PageUp();
		    when (changeCurrentItemOnPageChange)
                SetCurrentItemAfterPageChange();
		}
		
		public PageUp() : void
		{
		    ScrollUp(_viewPortHeightInPixels);
		}

        public PageDown(changeCurrentItemOnPageChange : bool) : void
		{
		    PageDown();
		    when (changeCurrentItemOnPageChange)
                SetCurrentItemAfterPageChange();
		}
		
		public PageDown() : void
		{
		    ScrollDown(_viewPortHeightInPixels);
		}
		
        public ScrollDown(distance : double) : void
		{ 
		    Debug.WriteLine($"ScrollDown $distance, currentPosition = $VerticalOffset");
    		def totalCount = ItemsControl.GetItemsOwner(this).Items.Count;
            
    		def FindVisibleItemByOffsetDown(offset)
    		{
    		    _visibleElements.Find(v => v.UpperBound < offset && GreaterOrEquals(v.LowerBound, offset));
    		}
    		
            def lowerItem = FindVisibleItemByOffsetDown(_viewPortHeightInPixels);    		
		    def getVerticalOffset(distance : double) 
		    {
                FindVisibleItemByOffsetDown(distance)
		            .Map(visibleElement => visibleElement.Index + (distance - visibleElement.UpperBound) / visibleElement.Height);
            }

            def (verticalOffset, items, rest) =
			match(getVerticalOffset(distance), lowerItem)
			{
			    | (Some(positionScrollTo), Some(VisibleItem(_, index, _, startOffset) as v)) 
			                        when (startOffset - _viewPortHeightInPixels) > distance 
			                                || index >= totalCount - 1 =>
			            (positionScrollTo, [v], _visibleElements.Except(v))            
				| (Some(positionScrollTo), Some(VisibleItem(_, index, _, startOffset) as v)) => 
				        def (items, rest) = GenerateItemsDown(startOffset, index + 1, distance + _viewPortHeightInPixels, _visibleElements.Except(v));
                        (positionScrollTo, items + [v], rest.Except(v))
				| _ => (0.0, [], _visibleElements)
			}
			
			def lowerOffset = _viewPortHeightInPixels + distance;
            def newLowerItem =  
                        items.Find(v => GreaterOrEquals(v.LowerBound, lowerOffset) && v.UpperBound < lowerOffset);

            def (verticalOffset, pixelOffset) = 
                match(items, newLowerItem)
                {
                    | ([], _) => (VerticalOffset, 0.0)
                    | (h :: _, None) => 
                        def newDistance = h.LowerBound - _viewPortHeightInPixels;
                        (getVerticalOffset(newDistance).Value, newDistance)
                    | (_, Some) => (verticalOffset, distance)
                            
                }

            _visibleElements = (items + rest)
                        .Map(_.Move(-pixelOffset))
                        .Sort((v1, v2) => v1.Index - v2.Index);

            SetVerticalOffset(verticalOffset);                        
		}
	
        public ScrollUp(distance : double) : void
		{ 
		    Debug.WriteLine($"ScrollUp $distance, currentPosition = $VerticalOffset");
			
		    def firstItem = 
			    FindVisibleItemByOffset(0.0);
			    
            def (items, restOfOldItems) = 
                match(firstItem)
                {
                    | (Some(VisibleItem(_, _, startOffset, _) as v)) when -startOffset > distance =>
                           ([v], _visibleElements.Except(v))
                           
                    | (Some(VisibleItem(_, index, startOffset, _) as v)) when index > 0 =>
                            def (items, rest) = GenerateItemsUp(startOffset, index - 1, distance, _visibleElements.Except(v));
                            (items + [v], rest)
                            
                    | _ => ([],_visibleElements)
                };
           
            def newFirstItem = items
                            .Find(v => v.LowerBound > -distance && LessOrEquals(v.UpperBound, -distance));
        
            def (verticalOffset, pixelOffset) = 
                match(items, newFirstItem)
                {
                    | ([], _) => (0.0,0.0)
                    | (h :: _, None) => (0.0, - h.UpperBound)
                    | (_, Some(v)) => ((-v.UpperBound - distance) / v.Height + v.Index, distance)
                };
           
            _visibleElements = (items + restOfOldItems)
                                    .Map(_.Move(pixelOffset))
                                    .Sort((v1, v2) => v1.Index - v2.Index);
            
            SetVerticalOffset(verticalOffset);  
		}

        private static Except[T](this lst : list[T], item : T) : list[T]
		{
		    lst.Filter(i => !object.ReferenceEquals(i, item))
		}
		
		public PageLeft() : void
		{ 
			SetHorizontalOffset(_offset.X - _viewPort.Width)
		}

		public PageRight() : void
		{ 
			SetHorizontalOffset(_offset.X + _viewPort.Width)
		}

		public ScrollOwner : System.Windows.Controls.ScrollViewer { get; set; }

		public SetHorizontalOffset(offset : double) : void
		{
			def fixed = FixupOffset(offset, _viewPort.Width, _extent.Width);
			_offset.X = fixed;
			_trans.X = -fixed;
		}

		private FixupOffset(offset : double, maxViewPort : double, maxExtent : double) : double
		{
			if (offset < 0 || maxViewPort > maxExtent)
			0.0
			else if (offset + maxViewPort >= maxExtent)
			maxExtent - maxViewPort
			else
			offset;
		}

		public SetVerticalOffset(offset : double) : void
		{
			def FixupVerticalOffset(offset : double) : double
			{
				if (offset < 0 || _viewPort.Height >= _extent.Height)
				0.0
				else if (offset + _viewPort.Height >= _extent.Height)
				_extent.Height - _viewPort.Height
				else
				offset
			}

			UpdateExtent();

			def finalOffset = FixupVerticalOffset(offset);
			def newOffset = Point(_offset.X, finalOffset);

			when (newOffset != _offset)
			{
				_offset = newOffset;
				when (ScrollOwner != null)
				ScrollOwner.InvalidateScrollInfo();

				InvalidateMeasure();
			}
		}

		public VerticalOffset : double
		{
			get{ _offset.Y }
		}

		public ViewportHeight : double
		{
			get{ _viewPort.Height }
		}

		public ViewportWidth : double
		{
			get{ _viewPort.Width }
		}

		private SetCurrentItemAfterPageChange() : void
		{
		    def offset = _currentItemOffset;
            match(FindVisibleItemByOffset(_currentItemOffset))
		    {
		        | Some(VisibleItem(_, index, _, _)) => _ = ItemsControl.GetItemsOwner(this).Items.MoveCurrentToPosition(index)
		        | _ => ()
		    }
		    _currentItemOffset = offset;
		}
		
		private FindVisibleItemByOffset(offset : double) : option[VisibleItem]
		{
		    _visibleElements.Find(v => LessOrEquals(v.UpperBound, offset) && v.LowerBound > offset)
		}
		
		private UpdateViewPort(availableSize : Size, visibleItemCount : double) : void
		{
			def viewPort = Size(availableSize.Width, visibleItemCount);
			_viewPortHeightInPixels = availableSize.Height;

			when (viewPort != _viewPort)
			{
				_viewPort = viewPort;
				when (ScrollOwner != null) ScrollOwner.InvalidateScrollInfo();
				SetVerticalOffset(VerticalOffset);
			}
		}

		private UpdateExtent() : void
		{

			def getCountAndWidth(l)
			{
				def count = l.Items.Count;
				def width = match(l.View)
				   {
					   | gridView is GridView =>
							   gridView.Columns.Sum(c => c.ActualWidth);
					   | _ => _viewPort.Width;                    
				   };
				(count, width)
			}

			def (itemCount, width) = match(ItemsControl.GetItemsOwner(this))
							   {
								   | l is ListView => getCountAndWidth(l);
								   | _ => (0,0.0)
							   }

			def extent = Size(if (width > 0) Math.Max(width, _viewPort.Width) else 0, itemCount);

			when (extent != _extent)
			{
				_extent = extent;

				SetVerticalOffset(_offset.Y);

				when (ScrollOwner != null) ScrollOwner.InvalidateScrollInfo();
			}
		}
		
		private mutable _currentItemOffset : double;

		private static ScrollUnitPixels : double = 60;

		private _recycled : HashSet[UIElement] = HashSet.[UIElement]();        
		private mutable _extent : Size = Size(0, 0);
		private mutable _offset : Point;
		private mutable _viewPort : Size;
		private mutable _visibleElements : list[VisibleItem] = [];
		private mutable _viewPortHeightInPixels : double;
		private _trans : TranslateTransform = TranslateTransform();
	}
}
