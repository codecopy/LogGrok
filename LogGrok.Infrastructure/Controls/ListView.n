using Nemerle;
using Nemerle.Extensions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nemerle.WPF;

using System;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;

using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Input;
using System.Windows.Threading;

using LogGrok.Macros.Diagnostics;
using LogGrok.Diagnostics;
using LogGrok.Infrastructure.Controls;

namespace LogGrok.Infrastructure
{
    public class ListView : System.Windows.Controls.ListView
    {
        public this()
        {
            base();

            def DoCopy(_, _)
            {
                CopySelectedItemsToClipboard();
            }

            def CanCopy(_, e : CanExecuteRoutedEventArgs )
            {
                e.CanExecute = !SelectedItems.IsEmpty();
                e.Handled = true;
            }

            _ = this.CommandBindings.Add(
                CommandBinding(ApplicationCommands.Copy, DoCopy, CanCopy));

      
            this.Loaded += (_, _) => ResetColumnsWidth();
        }

        public SelectItems(items : IEnumerable) : void
        {
            _ = SetSelectedItems(items);   
        }

        [DependencyProperty]
        public ReadOnlySelectedItems : IEnumerable { get; set }
        
        protected override OnItemsSourceChanged(oldValue : IEnumerable, newValue : IEnumerable) : void
        {
            base.OnItemsSourceChanged(oldValue, newValue);
            
            if (newValue == null)
            {
                _storedItemCount = 0;
            }
            else
            {
                when (newValue.Cast.[object]().Any())
                    ResetColumnsWidth();
                
                _storedItemCount = this.Items.Count;
            }
        }
        
        protected override OnItemsChanged(e : NotifyCollectionChangedEventArgs ) : void
        {
            match(e.Action)
            {
                | NotifyCollectionChangedAction.Reset => ()
                | _                                   => base.OnItemsChanged(e);
            }
            
            when (_storedItemCount == 0 && this.Items.Count > 0)
                ResetColumnsWidth();
            _storedItemCount = this.Items.Count;

        }

        protected override OnSelectionChanged(_ : SelectionChangedEventArgs) : void
        {
            when (SelectedIndex > 0)
            {
                _ = Items.MoveCurrentToPosition(SelectedIndex);
            }

            ReadOnlySelectedItems = SelectedItems;
        }
        
        protected override OnPreviewKeyDown(e : KeyEventArgs) : void
        {
            when (_storedItemCount > SelectionLimitations.MaxItemsCount)
            {
                match(e.Key)
                { 
                    | Key.Down => e.Handled = Keyboard.Modifiers.HasFlag(ModifierKeys.Shift);
                    | Key.Up => e.Handled = Keyboard.Modifiers.HasFlag(ModifierKeys.Shift);
                    | Key.A => e.Handled = Keyboard.Modifiers.HasFlag(ModifierKeys.Control);
                    | _ => {};
                }
            }
            
            base.OnPreviewKeyDown(e);
        }
        
        protected override OnKeyDown(e : KeyEventArgs) : void
        {
            match(e.Key)
            {                
                | Key.Down
                | Key.Up =>
                    def pos = SelectedIndex;

                    match (ItemContainerGenerator.ContainerFromItem(Items.CurrentItem) ?? 
                           ItemContainerGenerator.ContainerFromIndex(Items.CurrentPosition) ?? 
                           ItemContainerGenerator.ContainerFromIndex(pos))
                    {
                    | null                      =>  base.OnKeyDown(e);
                    | listViewItem is UIElement =>  
                            when(object.ReferenceEquals(Keyboard.FocusedElement, listViewItem))
                                _ = listViewItem.Focus();
                            base.OnKeyDown(e);
                    | _                         => ()
                    }
                | _ => base.OnKeyDown(e);
            }
        }

        [TraceMethod]
        private ResetColumnsWidth() : void
        {
            def CalculateRemainingSpace(gridView)
            {
                when (ActualWidth == Double.NaN)
                    Measure(Size(Double.PositiveInfinity, Double.PositiveInfinity));
                    
                ActualWidth - gridView.Columns.Take(gridView.Columns.Count - 1).Sum(c => c.ActualWidth) - SystemParameters.ScrollWidth * 2;

            }
              
            def UpdateLastColumnWidth(view)
            {
                def lastColumn = view.Columns.Last();
                def remainingSpace = CalculateRemainingSpace(view);
                when (lastColumn.ActualWidth < remainingSpace)
                    lastColumn.Width = remainingSpace;                
            }
                      
            def ResetWidth(view)
            {
                foreach (column in view.Columns.Take(view.Columns.Count - 1))
                {
                                
                    column.Width = 1;
                    column.ClearValue(GridViewColumn.WidthProperty);
                }
                _ = this.Dispatcher.BeginInvoke(Action(() => UpdateLastColumnWidth(view)), DispatcherPriority.ApplicationIdle);
            }

            match(View)
            {
                | view is GridView => 
                    {
                        _ = this.Dispatcher.BeginInvoke(Action(() => ResetWidth(view)), DispatcherPriority.ApplicationIdle);
                    }
                | _ => ()
            }

        }

        private CopySelectedItemsToClipboard() : void
        {
            def text = StringBuilder();
            foreach (line in SelectedItems)
            {
                _ = text.Append(line);
                _ = text.Append("\r\n");
            }
            _ = text.Replace("\0", string.Empty);            
            System.Windows.Clipboard.SetText(text.ToString());
        }

        private mutable _storedItemCount : int;        
    }
}
