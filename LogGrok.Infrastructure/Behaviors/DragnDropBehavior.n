using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Input;

using Nemerle.WPF;

using LogGrok.Infrastructure.Behaviors.DataObjects;

namespace LogGrok.Infrastructure.Behaviors
{
    [Record]
    public class FileDroppedEventArgs : RoutedEventArgs
    {
        public Files : IEnumerable[string] { get; private set; }
    }

    public module DragnDropBehavior
    {
        public FileDroppedEvent : RoutedEvent = EventManager.RegisterRoutedEvent(
            "FileDropped", RoutingStrategy.Bubble, typeof(FileDroppedEventArgs), typeof(DragnDropBehavior)) ;

        [DependencyProperty(IsAttached, Metadata=PropertyMetadata(false, OnAllowDropChanged))]
        public GetAllowDrop(element : UIElement) : bool;
        
        [DependencyProperty(IsAttached, Metadata=PropertyMetadata(null, OnDropCommandChanged))]
        public GetDropCommand(element : UIElement) : ICommand;

        private OnAllowDropChanged(d : DependencyObject, args : DependencyPropertyChangedEventArgs) : void 
        {
            def value = args.NewValue :> bool;
            def element = d :> UIElement;
            element.AllowDrop = value;
            
            if (value)
                element.Drop += OnDropped;
            else
                element.Drop -= OnDropped;
        }
        
        private OnDropCommandChanged(d : DependencyObject, args : DependencyPropertyChangedEventArgs) : void
        {
            def element = d :> UIElement;
            
            def handler = RoutedEventHandler((_, args) => OnDropEventArrived(element, args));
            
            if (args.NewValue == null)
                element.RemoveHandler(FileDroppedEvent, handler);
            else 
                element.AddHandler(FileDroppedEvent, handler);
        }
        
        private OnDropEventArrived(element : UIElement, args : RoutedEventArgs) : void
        {
            def arguments = args :> FileDroppedEventArgs;
            def command = GetDropCommand(element);
            
            command.Execute(arguments.Files)
        }

        private OnDropped(source : object, args : DragEventArgs) : void
        {
            match(args.Data)
            {
                | data is DataObject when data.ContainsFileDropList() =>
                    {
                        def fileSystemEntriesDataObject = FileSystemEntriesDataObject(data);
                        def args = FileDroppedEventArgs(FileDroppedEvent, fileSystemEntriesDataObject.GetFilesPath());
                        (source :> UIElement).RaiseEvent(args)
                    }
                | data is DataObject when data.GetDataPresent("FileGroupDescriptorW") =>
                    {   
                        def fileGroupDataObject = FileGroupDataObject(data);
                        def args = FileDroppedEventArgs(FileDroppedEvent, fileGroupDataObject.GetFilesPath());
                        (source :> UIElement).RaiseEvent(args)
                    }
                | _ => ()
            }
        }
    }
}
