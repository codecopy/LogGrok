using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.WPF;

using System;
using System.Reflection;
using System.Diagnostics;
using System.Text;
using System.Collections;
using System.Collections.Specialized;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Input;

namespace LogGrok.Infrastructure.Behaviors.ListMouseMultiSelectionBehaviorBackend
{
    public class MouseMultiSelectionController
    {
        public this(
            [NotNull] target : MouseMultiSelectionTarget,
            [NotNull] adorner : MouseMultiSelectionAdorner)
        {
            _target = target;
            _adorner = adorner;
        }
        
        public Target : MouseMultiSelectionTarget 
        { 
            get { _target; } 
        }
        
        public Adorner : MouseMultiSelectionAdorner 
        { 
            get { _adorner; } 
        }
        
        public Enable() : void
        {
            _target.Attach();
            _target.ScrollChanged += OnScrollChanged;
            _target.MouseDown += OnMouseDown;
            _target.SizeChanged += OnSizeChanged;
            _target.PreviewMouseDown += OnPreviewMouseDown;
            _target.MouseUp += OnMouseUp;
            _target.MouseMove += OnMouseMove;
            
            _adorner.Attach();            
            _adorner.MouseMove += OnMouseMove;
            _adorner.MouseUp += OnMouseUp;
            _adorner.PreviewMouseDown += OnPreviewMouseDown;
        }
        
        public Disable() : void
        {
            _target.Detach();
            _target.ScrollChanged -= OnScrollChanged;
            _target.MouseDown -= OnMouseDown;
            _target.SizeChanged -= OnSizeChanged;
            _target.PreviewMouseDown -= OnPreviewMouseDown;
            _target.MouseUp -= OnMouseUp;
            _target.MouseMove -= OnMouseMove;
            
            _adorner.Detach();
            _adorner.MouseMove -= OnMouseMove;
            _adorner.MouseUp -= OnMouseUp;
            _adorner.PreviewMouseDown -= OnPreviewMouseDown;
        }
        
        OnScrollChanged(_ : object, _ : RoutedEventArgs) : void
        {
            when (_isDragging && Mouse.LeftButton == MouseButtonState.Pressed)
                UpdateAdornerPosition();
        }
        
        OnSizeChanged(_ : object, _ : RoutedEventArgs) : void
        {
            EndDragging();
        }
        
        OnMouseDown(_ : object, _ : RoutedEventArgs) : void
        {
            _target.UnselectAllItems();            
        }
        
        OnMouseMove(_ : object, _ : MouseEventArgs) : void
        {
            when (_isDragging && Mouse.LeftButton == MouseButtonState.Pressed)
                UpdateAdornerPosition();
        }
        
        OnPreviewMouseDown(_ : object, args : MouseButtonEventArgs) : void
        {
            def isLeftButton = args.ChangedButton == MouseButton.Left;
            def originalSource = args.OriginalSource :> DependencyObject;
            def isMine = _target.IsChild(originalSource);
            def isOverGridViewHeader = originalSource.FindAncestor.[GridViewColumnHeader]().IsSome;
            def isOverScrollBar = originalSource.FindAncestor.[ScrollBar]().IsSome;
            def isShiftPressed = Keyboard.IsKeyDown(Key.LeftShift) || Keyboard.IsKeyDown(Key.RightShift);
            def isCtrlPressed = Keyboard.IsKeyDown(Key.LeftCtrl) || Keyboard.IsKeyDown(Key.RightCtrl);
            
            def spButtonPressed = isShiftPressed || isCtrlPressed;
            def itemUnderMouse = _target.GetItemUnderMouse();

            if (!isLeftButton)
            {
            }
            else if (!spButtonPressed && !isOverScrollBar && !isOverGridViewHeader && isMine)
            {
                def itemAlreadySelected = itemUnderMouse.IsSome && itemUnderMouse.Value.IsSelected;
                when (!itemAlreadySelected && args.ClickCount == 1)
                {            
                    StartDragging();
                    args.Handled = true;
                }
            }
            else if (itemUnderMouse.IsSome && isShiftPressed && isMine)
            {
                def itemUnderMouseIndex = _target.GetItemIndex(itemUnderMouse.Value);
                def startIndex = _target.SelectedIndex;
                def endIndex = if (itemUnderMouseIndex.IsSome) itemUnderMouseIndex.Value else _target.ItemsCount - 1;
                when (startIndex >= 0 && endIndex >=0)
                {
                    _target.SelectItems(startIndex, endIndex);
                    args.Handled = true;
                }
            }
            else { }
            
            when (args.Handled)
                _target.Focus();
        }
        
        OnMouseUp(_ : object, args : MouseButtonEventArgs) : void
        {
            when (args.ChangedButton == MouseButton.Left && _isDragging)
            {
                def mousePosition = _target.GetMousePosition();
                def itemUnderMouse = _target.GetItemUnderMouse();
                
                if (itemUnderMouse.IsSome && itemUnderMouse.Value.Equals(_firstSelectedItem))
                    _target.SelectItem(itemUnderMouse.Value);
                else if (mousePosition.IsSome && Point.Subtract(_startMousePosition, mousePosition.Value).Length < 10.0d)
                    _target.UnselectAllItems();
                else {}
                        
                EndDragging();
            }
        }
        
        StartDragging() : void
        {
            _firstSelectedItem = _target.GetItemUnderMouse().WithDefault(null); 
            _startMousePosition =  _target.GetMousePosition().WithDefault(Point(0, 0));
            
            def scrollBarPosition = _target.GetScrollbarPosition();
            _startScrollBarPosition = if (scrollBarPosition.IsSome) scrollBarPosition.Value else Point(0, 0);
            
            def scrollContentPresenter = _target.ScrollContentPresenter;
            when (scrollContentPresenter.IsSome)
                _ = Mouse.Capture(scrollContentPresenter.Value);
                
            _isDragging = true;
        }
        
        EndDragging() : void
        {
            when (_isDragging)
            {
                when (_adorner.IsSelecting)
                {
                    SelectItemsUnderAdorner();
                    UnhighlightAllItems();
                    _adorner.IsSelecting = false;
                }
                
                _firstSelectedItem = null;
                _startMousePosition = Point(0, 0);
                _startScrollBarPosition = Point(0, 0);
                
                 _ = Mouse.Capture(null);
                 
                _isDragging = false;
            }
        }
        
        GetVisualSelectionBounds() : option[Rect]
        {
            def currentMousePosition = _target.GetMousePosition();
            def currentScrollbarPosition = _target.GetScrollbarPosition();
            def scrollContentPresenter = _target.ScrollContentPresenter;
            if (_isDragging && currentMousePosition.IsSome && currentScrollbarPosition.IsSome && scrollContentPresenter.IsSome)
            {  
                def startPosition = Point.Add(_startMousePosition, 
                    Point.Subtract(_startScrollBarPosition, currentScrollbarPosition.Value));
                def endPosition = currentMousePosition.Value;
                
                Some(Rect(startPosition, endPosition));
            }
            else
            {
                None();
            }
        }
        
        UpdateAdornerPosition() : void
        {
            def selectionBounds = GetVisualSelectionBounds();
            when (selectionBounds.IsSome)
            {           
                if (_adorner.IsSelecting)
                {
                    _adorner.SelectionBounds = selectionBounds.Value;
                    HighlightItemsUnderAdorner();
                }
                else
                {
                    _adorner.IsSelecting = 
                         selectionBounds.Value.Width > SystemParameters.MinimumHorizontalDragDistance ||
                         selectionBounds.Value.Height > SystemParameters.MinimumVerticalDragDistance;
                    UnhighlightAllItems();
                }
            }
        }
        
        HighlightItemsUnderAdorner() : void
        {
            UnhighlightAllItems();
            
            foreach (item in GetItemsUnderAdorner())
            {
                ListMouseMultiSelectionBehavior.SetIsHighlighted(item, true);
                _highlightedItems.Add(item);
            }
        }
        
        UnhighlightAllItems() : void
        {
            foreach (item in _highlightedItems)
                ListMouseMultiSelectionBehavior.SetIsHighlighted(item, false);
            
            _highlightedItems.Clear();
        }
        
        SelectItemsUnderAdorner() : void
        {
            _target.SelectItems(GetItemsUnderAdorner());
        }
        
        GetItemsUnderAdorner() : IEnumerable.[ListViewItem]
        {
            def indexBounds = GetAdornerIndexBounds();
            when (indexBounds.IsSome)
            {
                for (mutable i = indexBounds.Value.Item1; i <= indexBounds.Value.Item2; i++)
                {
                    def item = _target.GetItemByIndex(i);
                    when (item.IsSome)
                        yield item.Value;
                }
            }
        }
        
        GetAdornerIndexBounds() : option[Tuple.[int, int]]
        {
            def startItem = _target.GetItemUnderPoint(_adorner.SelectionBounds.TopLeft);
            def endItem = _target.GetItemUnderPoint(_adorner.SelectionBounds.BottomRight);
            if (startItem.IsSome && endItem.IsSome)
            {
                def strartItemIndex = _target.GetItemIndex(startItem.Value);
                def endItemIndex = _target.GetItemIndex(endItem.Value);
                if (strartItemIndex.IsSome && endItemIndex.IsSome)
                {
                    Some(Tuple(strartItemIndex.Value, endItemIndex.Value));
                }
                else
                {
                    None();
                }
            }
            else
            {
                None();
            }
        }
        
        private _target : MouseMultiSelectionTarget;
        private _adorner : MouseMultiSelectionAdorner;
        
        private _highlightedItems : IList.[ListViewItem] = List();
        
        private mutable _firstSelectedItem : ListViewItem;
        private mutable _startMousePosition : Point;
        private mutable _startScrollBarPosition : Point;
        private mutable _isDragging : bool;
    }
}
