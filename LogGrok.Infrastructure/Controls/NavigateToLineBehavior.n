using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.WPF;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;

using Microsoft.Practices.Prism.PubSubEvents;

namespace LogGrok.Infrastructure.Controls
{
    public module NavigateToLineBehavior
    {
        [DependencyProperty(IsAttached, Metadata=PropertyMetadata(null, OnRequestChanged))]
        public GetNavigateToLineRequest(listView : LogGrok.Infrastructure.ListView)  : NavigateToLineRequest;

        private OnRequestChanged(d : DependencyObject, args : DependencyPropertyChangedEventArgs) : void
        {
            match (d)
            {
                | (listView is LogGrok.Infrastructure.ListView) => 
                {
                    when (args.OldValue != null)
                    {
                        def request = args.OldValue:> NavigateToLineRequest;
                        _ = _subscribersMap.Remove(request);
                        request.Navigate -= RequestNavigate;
                    }

                    when (args.NewValue != null)
                    {
                        def request = args.NewValue :> NavigateToLineRequest;
                        _subscribersMap[request] = listView;
                        request.Navigate += RequestNavigate;
                    }
                }
                
                
                | _ => ()// TODO: throw InvalidOperationException($"Unsupported targetType: $(d.GetType)")
            }
        }

        private static RequestNavigate(sender : object, args : DataEventArgs[int]) : void
        {
            def listView = _subscribersMap[sender :> NavigateToLineRequest];
            listView.BringIndexIntoView(args.Value);
            listView.SelectedIndexes = [args.Value];
        }

        private _subscribersMap = 
            Dictionary.[NavigateToLineRequest, LogGrok.Infrastructure.ListView]();
    }
}
