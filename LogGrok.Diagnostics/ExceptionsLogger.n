using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Threading;
using System.Collections.Generic;
using System.Runtime.ExceptionServices;
using System.Linq;
using System.Threading;

using LogGrok.Diagnostics.ExceptionsProcessing;

namespace LogGrok.Diagnostics
{
  public module ExceptionsLogger
  {      
      public Initialize() : void
      {
          AppDomain.CurrentDomain.FirstChanceException += OnFirstChanceException;
          AppDomain.CurrentDomain.UnhandledException += OnUnhandledException;     
      }
      
      private OnFirstChanceException(_ : object, args : FirstChanceExceptionEventArgs) : void
      {
          OnException(args.Exception, "first chance exception");
      }
      
      private OnUnhandledException(_ : object, args : UnhandledExceptionEventArgs) : void
      {
          OnException(args.ExceptionObject, "unhandled exception");
      }
      
      private OnException(exceptionObj : object, exceptionType : string) : void
      {
          def exception = GetException(exceptionObj);
          try
          {
              when (Interlocked.Increment(ref _isProcessingException) < _maxRecursionDeep && 
                    !FirstChanceExceptionsFilter.IsKnown(exception))
              {
                  _logger.Error("{0}: {1}", exceptionType, exception); 
                  _logger.Flush();
              }
          }
          catch 
          {
              | logException => Debug.WriteLine(
                                    "Failed to log {0}: {1}{2}(logException: {3})", 
                                    exceptionType,
                                    exception,
                                    Environment.NewLine,                                    
                                    logException);
          }
          finally
          {
            _ = Interlocked.Decrement(ref _isProcessingException);
          }
      }
      
      private GetException(exceptionObj : object) : Exception
      {
          (exceptionObj :> Exception) ?? _unknownException;
      }
      
      [ThreadStatic]
      private _maxRecursionDeep : int = 3;
      
      private _unknownException : Exception = ApplicationException("An unknown exception occurred");
      
      private _logger : Logger = Logger.Get(DiagnosticsComponent.Name);
      
      private mutable _isProcessingException : int = 0;
  }
}
