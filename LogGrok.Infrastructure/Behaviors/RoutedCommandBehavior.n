using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Windows;
using System.Windows.Data;
using System.Windows.Input;
using System.Collections.ObjectModel;

using Nemerle.WPF;
using System.Windows.Markup;

namespace LogGrok.Infrastructure.Behaviors
{
    public module RoutedCommandBehavior
    {
        [DependencyProperty(IsAttached, Metadata=PropertyMetadata(null, CommandChanged))]
        public GetRoutedCommandToCommandBinding(_ : DependencyObject) : RoutedCommandToCommandBinding { get; set; }

        private static CommandChanged(d : DependencyObject, _ : DependencyPropertyChangedEventArgs ) : void
        {
            def binding = GetRoutedCommandToCommandBinding(d);
            when (binding != null)
            {
                def command = binding.Command;
                def routedCommand = binding.RoutedCommand;

                when(command != null && routedCommand != null)
                {
                    def commandBinding = CommandBinding(routedCommand, Executed, CanExecute);
                    def uiElement = d :> UIElement;
                    _ = uiElement.CommandBindings.Add(commandBinding);
                }
            }
        }
        
        private static Executed(target : object, e : ExecutedRoutedEventArgs) : void
        {
            def command = GetRoutedCommandToCommandBinding(target :> DependencyObject).Command;
            command.Execute(e.Parameter);
            e.Handled = true;
        }

        private static CanExecute(target : object, e : CanExecuteRoutedEventArgs) : void
        {
            def command = GetRoutedCommandToCommandBinding(target :> DependencyObject).Command;
            e.CanExecute = command.CanExecute(e.Parameter);
            e.ContinueRouting = true;
            e.Handled = true;            
        }        
    }
}
