using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.WPF;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Diagnostics;

using Microsoft.Practices.Prism.Regions;
using Microsoft.Practices.ServiceLocation;
using Microsoft.Practices.Unity;
using Xceed.Wpf.AvalonDock.Layout;

namespace LogGrok.Infrastructure
{
    public class AvalonRegion : DependencyObject
    {
        [DependencyProperty(IsAttached, Metadata = FrameworkPropertyMetadata(null, FrameworkPropertyMetadataOptions.Inherits, OnNameChanged))]
        public static GetContext(f : DependencyObject) : IUnityContainer;
        
        [DependencyProperty(IsAttached, Metadata = PropertyMetadata(OnNameChanged))]
        public static GetName(f : DependencyObject) : string;

        private static OnNameChanged(d : DependencyObject, _ : DependencyPropertyChangedEventArgs )  : void 
        {
            def CreateRegion(element, context, name)
            {
                def mappings = context.Resolve() : RegionAdapterMappings;
                def adapter = mappings.GetMapping(element.GetType());
                _ = adapter.Initialize(element, name);
            }
            
            
            def name = GetName(d);
            def context = GetContext(d);
            
            match(d)
            {
                | l is ILayoutControl => when (l.Model is DependencyObject
                            && GetContext(l.Model :> DependencyObject) == null ) SetContext(l.Model :> DependencyObject, context)
                | _ => ()
            }
            
            when (name == "SearchDocumentsPane")
                Console.WriteLine("");
            
            when (d != null && context != null && name != null)
               CreateRegion(d, context, name);
        }
    }
}
