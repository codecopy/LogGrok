using Nemerle;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Media;
using Nemerle.WPF;
using Nemerle.Collections;

using LogGrok.Core;
using LogGrok.Infrastructure;
using System.Text.RegularExpressions;
using System.Windows;

namespace LogGrok.LogView
{
    [NotifyPropertyChanged]
    public class LineViewModel : IEquatable[LineViewModel]
    {  
        class LineWithNonLazyRawLine : ILine
        {
            public this (lineFactory : Func[ILine])
            {
                _line   = lineFactory();
                RawLine = _line.RawLine;
            }
            
            public Item[s : string] : TextRange
            {
                get { _line[s] }
            }
        
            public Offset : long { get; set; }
            public EndOffset : long { get; set; }
            
            public Time : TimeSpan { get { _line.Time } }
        
            public RawLine : string { get; private set; }
            
            private _line : ILine;
        }
    
        public this(index : int, lineFactory : Func[ILine], meta : MetaInformation, textColorizer : TextColorizer)
        {
            _index  = index;
            
            _line = LineWithNonLazyRawLine(lineFactory);
            _fields = meta.Fields
                            .Select(field => field.FieldName).ToDictionary(name => name, name => _line[name]);
            _textColorizer = textColorizer;
                        
            Time = string.Format(@"{0:hh\:mm\:ss\.fff}", _line.Time);
            
            RawLine = _line.RawLine;
            
            WeakEventManager.[TextColorizer, EventArgs].AddHandler(textColorizer, "SettingsChanged", UpdateColors);
            _colors = Lazy(GetColors);           
        }
        
        public Item[s : string] : TextRange
        {
            [Memoize]
            get
            {
                match(s)
                { 
                    | "Index" => TextRange.FromString(Index.ToString())
                    | "Time" => TextRange.FromString(Time.ToString())
                    | _ => _fields[s]
                }
            }
        }

        public Background : Color
        {
            get
            {
                def (_, background, _) = _colors.Value;
                background
            }
        }
        
        public Foreground : Color
        {
            get
            {
                def (_, _, foreground) = _colors.Value;
                foreground
            }
        }
        
        public HasTextColor : bool
        {
            get
            {
                def (hasColor, _, _) = _colors.Value;
                hasColor
            }
        }
        
        private TextColor : option[TextColor]
        {
            get { _textColorizer.GetTextColor(_line) }
        }
        
        public Index : int 
        { 
            get { _index }
        }
        
        public Time : string 
        { 
            get; private set;
        }
        
        public RawLine : string { get; private set; }
        
        public Equals(other : LineViewModel) : bool
            implements IEquatable[LineViewModel].Equals
        {
            Index == other.Index
        }
        
        public override Equals(other : object) : bool 
        {
            | l is LineViewModel => Index == l.Index
            | _ => false
        }
        
        public override GetHashCode() : int
        {
            Index.GetHashCode()
        }
        
        public override ToString() : string { RawLine }
        
        private UpdateColors(_ : object, _ : EventArgs) : void
        {
            _colors = Lazy(GetColors);
            RaisePropertyChanged(HasTextColor);
            RaisePropertyChanged(Background);
            RaisePropertyChanged(Foreground);
        }        
        
        private GetColors() : bool*Color*Color
        {
            def textColor = _textColorizer.GetTextColor(_line);
            def hasTextColor = textColor.IsSome;
            if (hasTextColor)
            {
                (true, textColor.Value.Background, textColor.Value.Foreground)
            } 
            else
            {
                (false, default(Color), default(Color))
            }
        }
        
        mutable _colors : Lazy[bool*Color*Color];
        
        private _index : int;
        private _fields : Dictionary[string, TextRange];
        private _textColorizer : TextColorizer;
        private _line : ILine;
    }
}
