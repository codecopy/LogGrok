using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;

namespace LogGrok.Core
{
    [Record]
    public class Text  : IComparable, IComparable[Text]
    {
       
        public static Empty : Text
        {
            get
            {
                _empty
            }
        }
        
        public IsEmpty : bool
        {
            get
            {
                _end == _start;
            }
        }
        
        public Length : int
        {
            get
            {
                _end - _start;
            }
        }
        
        public override GetHashCode() : int 
        {
            _buffer.GetModifiedFNVHash(_start, _end - _start)
        }
        
        public override Equals(other : object) : bool
        {
            | otherText is Text =>
            {
                if (Length != otherText.Length)
                    false
                else
                {
                    mutable result = true;
                    mutable j = otherText._start;
                    for (mutable i = _start; i < Length + _start; i++)
                    {
                        when (_buffer[i] != otherText._buffer[j]) 
                        {
                            result = false;
                            break;
                        }
                        j++;
                    }
                    result
                }
            }
            | _ => false
        }
        
        public NonGenericCompareTo(obj : object) : int 
                            implements IComparable.CompareTo
        {
            | text is Text => this.ToString().CompareTo(text.ToString())
            | _ => throw ArgumentException("Cannot compare $obj to Text");
        }
        
        public CompareTo(obj : Text) : int 
        {
            this.ToString().CompareTo(obj.ToString())
        }
        
        public override ToString() : string
        {
            throw InvalidOperationException()
        }
        
        protected ToString(encoding : System.Text.Encoding) : string
        {
            encoding.GetString(_buffer, _start, _end - _start);
        }
        
        private static _empty : Text = Text8(0, 0, array(0));
        
        private _start : int;
        private _end   : int;
        private _buffer : array[byte];
    }
    
    public class TextWithCopy : Text, IComparable, IComparable[Text]
    {
        protected this(start : int, end : int, buffer : array[byte])
        {
            unchecked
            {
                Buffer = array(end - start);
                Buffer.BlockCopy(buffer, start, Buffer, 0, end - start);
                
                base(0, Buffer.Length, Buffer)
            }
        }      
        
       
        protected Buffer : array[byte];
        
        
                
        public override ToString() : string
        {
            throw InvalidOperationException()
        }
        
        private static _empty : Text = Text8(0, 0, array(0));
        
    }
}
