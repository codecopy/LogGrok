using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.WPF;

using System;
using System.Reflection;
using System.Text;
using System.Collections;
using System.Collections.Specialized;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using System.Windows.Media;

using LogGrok.Infrastructure.Behaviors.ListMouseMultiSelectionBehaviorBackend;

namespace LogGrok.Infrastructure.Behaviors
{
    public module ListMouseMultiSelectionBehavior
    {
        [DependencyProperty(IsAttached, Metadata=PropertyMetadata(false, EnabledChanged))]
        public GetEnabled(_ : ListView) : bool { get; set; }
                       
        [DependencyProperty(IsAttached, Metadata=PropertyMetadata(false))]
        public GetIsHighlighted(_ : DependencyObject) : bool { get; set; }
        
        [DependencyProperty(IsAttached, Metadata=PropertyMetadata(null, SelectionRectangleBrushChanged))]
        public GetSelectionRectangleBrush(_ : DependencyObject) : Brush { get; set; }
        
        [DependencyProperty(IsAttached, Metadata=PropertyMetadata(null, SelectionRectanglePenChanged))]
        public GetSelectionRectanglePen(_ : DependencyObject) : Pen { get; set; }
        
        [DependencyProperty(IsAttached)]
        GetMouseMultiSelectionController(_ : ListView) : MouseMultiSelectionController { get; set; }
        
        EnabledChanged(dependencyObject : DependencyObject, args : DependencyPropertyChangedEventArgs ) : void
        {
            def listView = dependencyObject :> ListView;
            
            when (args.OldValue :> bool)
            {
                def controller = GetMouseMultiSelectionController(listView);
                controller.Disable();
            }
            
            when (args.NewValue :> bool)
            {
                def controller = GetMouseMultiSelectionController(listView) ?? CreateController(listView);
                SetMouseMultiSelectionController(listView, controller);
                controller.Enable();
            }           
        }
        
        SelectionRectangleBrushChanged(
            dependencyObject : DependencyObject, 
            args : DependencyPropertyChangedEventArgs) : void
        {
            def listView = dependencyObject :> ListView;
            def controller = GetMouseMultiSelectionController(listView);
            when (controller != null)
            {
                controller.Adorner.Brush = args.NewValue :> Brush;
            }
        }
        
         SelectionRectanglePenChanged(
            dependencyObject : DependencyObject, 
            args : DependencyPropertyChangedEventArgs) : void
        {
            def listView = dependencyObject :> ListView;
            def controller = GetMouseMultiSelectionController(listView);
            when (controller != null)
            {
                controller.Adorner.Pen = args.NewValue :> Pen;
            }
        }
        
        CreateController(listView : ListView) : MouseMultiSelectionController
        {
            def target = MouseMultiSelectionTarget(listView);
            def adorner = MouseMultiSelectionAdorner(target);
            def controller = MouseMultiSelectionController(target, adorner);
            
            adorner.Brush = GetSelectionRectangleBrush(listView);
            adorner.Pen = GetSelectionRectanglePen(listView);
            
            controller;
        }
    }
}
