using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.WPF;

using System;
using System.Reflection;
using System.Text;
using System.Collections;
using System.Collections.Specialized;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Input;
using System.Windows.Media;

using LogGrok.Controls;
using LogGrok.Infrastructure.Controls;

namespace LogGrok.Infrastructure.Behaviors.ListMouseMultiSelectionBehaviorBackend
{
    public class MouseMultiSelectionTarget
    {
        private mutable SelectedItems : HashSet[int] = HashSet.[int]();
        
        public this([NotNull] listView : LogGrok.Infrastructure.ListView)
        {
            _listView = listView;
            
            _listView.ItemContainerGenerator.StatusChanged += _ => UpdateSelection();
            
            _listView.SelectedIndexesChanged += () => 
                {
                    unless (object.ReferenceEquals(SelectedItems, _listView.SelectedIndexes) || _listView.SelectedIndexes == null)
                    {
                        SelectedItems = HashSet(_listView.SelectedIndexes);
                        when (!SelectedItems.Contains(CurrentItem))
                            CurrentItem = SelectedItems.First();
                        UpdateSelection();
                    }
                };
            
            ScrollContentPresenterChanged += (_,_) => { };
        }
        
        public UpdateSelection() : void
        {
            def generator = _listView.ItemContainerGenerator;
            when (generator.Status == GeneratorStatus.ContainersGenerated)
            {
                foreach(item in VisualTreeWalker.GetVisualChildren.[ListViewItem](_listView))
                {
                    def index = generator.IndexFromContainer(item);
                    def isItemSelected = SelectedItems.Contains(index);
                    when (item.IsSelected != isItemSelected)
                        item.IsSelected = isItemSelected;
                }
            }
            
            _listView.SelectedIndexes = SelectedItems;
        }
        
        public event ScrollChanged : RoutedEventHandler
        {
            add { _listView.AddHandler(ScrollViewer.ScrollChangedEvent, value); }
            remove { _listView.RemoveHandler(ScrollViewer.ScrollChangedEvent, value); }
        }
        
        public event SizeChanged : RoutedEventHandler
        {
            add { _listView.AddHandler(ListView.SizeChangedEvent, value); }
            remove { _listView.RemoveHandler(ListView.SizeChangedEvent, value); }
        }
        
        public event MouseDown : RoutedEventHandler
        {
            add { _listView.AddHandler(ListView.MouseDownEvent, value); }
            remove { _listView.RemoveHandler(ListView.MouseDownEvent, value); }
        }
        
        public event PreviewMouseDown : MouseButtonEventHandler
        {
            add { _listView.AddHandler(ListView.PreviewMouseDownEvent, value); }
            remove { _listView.RemoveHandler(ListView.PreviewMouseDownEvent, value); }
        }
        
        public event MouseUp : MouseButtonEventHandler
        {
            add { _listView.AddHandler(ListView.MouseUpEvent, value); }
            remove { _listView.RemoveHandler(ListView.MouseUpEvent, value); }
        }
        
        public event MouseMove : MouseEventHandler
        {
            add { _listView.AddHandler(ListView.MouseMoveEvent, value); }
            remove { _listView.RemoveHandler(ListView.MouseMoveEvent, value); }
        }
        
        public event KeyDown : KeyEventHandler 
        {
            add { _listView.KeyDown += value; }
            remove { _listView.KeyDown -= value; }
        }
        
        public event ScrollContentPresenterChanged : EventHandler;
        
        public SelectedIndex : int
        {
            get { _listView.SelectedIndex; }
        }
        
        public ItemsCount : int
        {
            get { _listView.Items.Count; }
        }
        
        public ScrollContentPresenter : option[ScrollContentPresenter]
        {
            get { _scrollContentPresenter; }
        }
        
        public Attach() : void
        {
            _listView.Loaded += OnListViewLoaded;
            _listView.Unloaded += OnListViewUnloaded;
            
            ViewPropertyDescriptor.AddValueChanged(_listView, OnListViewChanged);
                        
            UpdateScrollContentPresenter();
        }
        
        public Detach() : void
        {
            _listView.Loaded -= OnListViewLoaded;
            _listView.Unloaded -= OnListViewUnloaded;
            
            ViewPropertyDescriptor.RemoveValueChanged(_listView, OnListViewChanged);
        }
        
        public IsChild(obj : DependencyObject) : bool
        {
            def objAncestor = obj.FindAncestor.[ListView]();
            objAncestor.IsSome && objAncestor.Value.Equals(_listView);   
        }
        
        public GetMousePosition() : option[Point]
        {
            def scrollContentPresenter = ScrollContentPresenter;
            if (scrollContentPresenter.IsSome) Some(Mouse.GetPosition(scrollContentPresenter.Value)) else None();            
        }
        
        public GetItemUnderMouse() : option[ListViewItem]
        {            
            def mousePosition = GetMousePosition();
            if (mousePosition.IsSome) GetItemUnderPoint(mousePosition.Value) else None();            
        }
        
        public GetItemUnderPoint(p : Point) : option[ListViewItem]
        {
            def scrollContentPresenter = ScrollContentPresenter;
            def hitTestResult = if (scrollContentPresenter.IsSome) VisualTreeHelper.HitTest(scrollContentPresenter.Value, p) else null;
            if (hitTestResult != null) hitTestResult.VisualHit.FindAncestor.[ListViewItem](scrollContentPresenter.Value) else None();
        }
        
        public GetItemIndex(item : ListViewItem) : option[int]
        {
            def index = if (item != null) _listView.ItemContainerGenerator.IndexFromContainer(item) else -1;
            if (index >= 0) Some(index) else None();            
        }
        
        public GetItemByIndex(index : int) : option[ListViewItem]
        {
            def item = if (index >= 0) _listView.ItemContainerGenerator.ContainerFromIndex(index) else null;
            if (item != null) Some(item :> ListViewItem) else None();        
        }
        
        public GetScrollbarPosition() : option[Point]
        {
            def scrollContentPresenter = ScrollContentPresenter;
            def scrollViewer = if (scrollContentPresenter.IsSome) scrollContentPresenter.Value.FindAncestor.[ScrollViewer]() else None();
            if (scrollViewer.IsSome) 
                Some(Point(
                    _listView.ActualWidth  / scrollViewer.Value.ViewportWidth  * scrollViewer.Value.HorizontalOffset,
                    _listView.ActualHeight / scrollViewer.Value.ViewportHeight * scrollViewer.Value.VerticalOffset))
                else
                    None();
        }
         
        public SelectOnlyItem(position : int) : void
        {
            SelectOnlyRange(position, position);
        }
        
        public SelectOnlyItem(item : ListViewItem) : void
        {
            GetItemIndex(item).Iter(SelectOnlyItem);
        }
        
        public SelectOnlyRange(first : int, last : int) : void
        {
            SelectedItems.Clear();
            SelectRange(first, last);
        }
        
        public SelectRange(first : int, last : int) : void
        {
            foreach (idx in [Math.Min(first, last)..Math.Max(first, last)])
            {
                _ = SelectedItems.Add(idx);
            }
            
            CurrentItem = last;
            UpdateSelection();
        }
        
        public ToggleItemSelection(position : int) : void
        {
            match(SelectedItems.Contains(position), SelectedItems.Count)
            {
                | (true, 1)  => {}
                | (true, _)  => 
                    _ = SelectedItems.Remove(position); 
                        CurrentItem = if (SelectedItems.Contains(position+1)) 
                                        position + 1 
                                      else if (SelectedItems.Contains(position-1))
                                        position - 1;
                                      else SelectedItems.First();
                                      
                | (false, _) => _ = SelectedItems.Add(position); CurrentItem = position;
            };
            
            UpdateSelection();
        }
        
        public ExpandSelectionDown() : void
        {
            def (bottom, top) = PrepareNavigation();
            
            if (CurrentItem == bottom && CurrentItem < _listView.Items.Count - 1)
            {
                _ = SelectedItems.Add(CurrentItem + 1);
                CurrentItem = CurrentItem + 1;
                _listView.BringIndexIntoViewWhileNavigatingDown(CurrentItem);
            }
            else if (CurrentItem == top)
            {
                _ = SelectedItems.Remove(CurrentItem);
                CurrentItem = SelectedItems.Min();
                _listView.BringIndexIntoViewWhileNavigatingDown(CurrentItem);
                
            } else 
            {
                ()
            }
        }
        
        public ExpandSelectionUp() : void
        {
            def (bottom, top) = PrepareNavigation();                        
            if (CurrentItem == top && CurrentItem > 0)
            {
                _ = SelectedItems.Add(CurrentItem - 1);
                CurrentItem = CurrentItem - 1;
                _listView.BringIndexIntoView(CurrentItem);
            }
            else if (CurrentItem == bottom)
            {
                _ = SelectedItems.Remove(CurrentItem);
                CurrentItem = SelectedItems.Max();
                _listView.BringIndexIntoView(CurrentItem);
            } else 
            {
                ()
            }
        }
        
        public NavigateUp() : void
        {
            when (CurrentItem > 0)
            {
                SelectedItems.Clear();
                CurrentItem = CurrentItem - 1;
                _ = SelectedItems.Add(CurrentItem);
                _listView.BringIndexIntoView(CurrentItem);
            }
        }
        
        public NavigateDown() : void
        {
            when (CurrentItem < _listView.Items.Count - 1)
            {
                SelectedItems.Clear();
                CurrentItem = CurrentItem + 1;
                _ = SelectedItems.Add(CurrentItem);
                _listView.BringIndexIntoViewWhileNavigatingDown(CurrentItem);
            }
        }
                
        public Focus() : void
        {
            _ = _listView.Focus();   
        }

        private PrepareNavigation() : int * int
        {
            when (SelectedItems.Count() == 0)
            {
                when (CurrentItem < 0)
                    CurrentItem = 0;
                _ = SelectedItems.Add(CurrentItem)
            }
            
            def b = SelectedItems.Max();
            def t = SelectedItems.Min();

            
            if (CurrentItem != b && CurrentItem != t)
            {
                SelectedItems.Clear();
                _ = SelectedItems.Add(CurrentItem);
                (CurrentItem, CurrentItem)
            }
            else
            {
                (b, t)
            }
        }        
        
        private CurrentItem : int
        {
            get 
            { 
                _listView.Items.CurrentPosition 
            }
            set 
            { 
                _ = _listView.Items.MoveCurrentToPosition(value);  
                _listView.SelectedIndex = value;
            }
        }

        
        UpdateScrollContentPresenter() : void
        {
            _scrollContentPresenter = match (
                _listView.GetVisualChildren.[ScrollContentPresenter]()
                .Where(c => c.Content is ItemsPresenter)
                .Where(c => object.ReferenceEquals((c.Content :> ItemsPresenter).TemplatedParent, _listView))
                .FirstOrDefault())
            {
                | child when child != null => Some(child);
                | _                        => None();
            }
            
            ScrollContentPresenterChanged(this, EventArgs.Empty);
        }
        
        OnListViewLoaded(_ : object, _ : RoutedEventArgs) : void
        {
            UpdateScrollContentPresenter();
        }
        
        OnListViewChanged(_ : object, _ : EventArgs) : void
        {
            UpdateScrollContentPresenter();
        }
        
        OnListViewUnloaded(_ : object, _ : RoutedEventArgs) : void
        {
            Detach();
        }
        
        private static ViewPropertyDescriptor : DependencyPropertyDescriptor = DependencyPropertyDescriptor.FromProperty(
           ListView.ViewProperty, typeof(ListView));
        
        private _listView : ListView;
        private mutable _scrollContentPresenter : option[ScrollContentPresenter];
    }
}
