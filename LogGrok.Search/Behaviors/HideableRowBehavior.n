using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nemerle.WPF;

using System;
using System.Reflection;
using System.Text;
using System.Collections;
using System.Collections.Specialized;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Input;

namespace LogGrok.Search.Behaviors
{
    public module HideableRowBehavior
    {
        [DependencyProperty(IsAttached, Metadata=PropertyMetadata(null, OnHideableRowChanged))]
        public GetRow(_ : Grid) : RowDefinition { get; set; }
        
        [DependencyProperty(IsAttached, Metadata=PropertyMetadata(false, OnHideableRowChanged))]
        public GetIsVisible(_ : Grid) : bool { get; set; }
        
        [DependencyProperty(IsAttached, Metadata=PropertyMetadata(-1, OnHideableRowChanged))]
        public GetIndex(_ : Grid) : int { get; set; }
                
        OnHideableRowChanged(d : DependencyObject, _ : DependencyPropertyChangedEventArgs) : void 
        {
            def grid = d :> Grid;
            def hiddenRow = GetRow(grid);
            def isVisible = GetIsVisible(grid);
            def index = GetIndex(grid);
            
            when (hiddenRow != null && index >= 0)
            {
                _ = grid.RowDefinitions.Remove(hiddenRow);                    
                
                when (isVisible)
                    _ = grid.RowDefinitions.Insert(index, hiddenRow);                                        
            }
        }
    }
}
