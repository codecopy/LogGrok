using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Threading;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Assertions;

using Microsoft.Practices.Unity;

using LogGrok.Core;
using LogGrok.LogParserBase;
using System.Collections.Concurrent;
using LogGrok.Macros.Diagnostics;

namespace LogGrok.LogParserBase
{
    type StreamFactory     = void -> Stream;
    type LineReaderFactory = (void -> Stream) -> ILineReader;

    public class LogProcessor : ILogProcessor
    {
        private this([NotNullOrEmpty] filePath   : string,
                    [NotNull] streamFactory     : StreamFactory,
                    [NotNull] lineReader        : ILineReader,
                    [NotNull] loadFunc          : LogProcessor*IEnumerable[IIndexedLineConsumer]*CancellationToken -> void,
                    [NotNull] fileSearcher      : FileSearcher.GetOffsetsWithTextFunction,
                    [NotNull] headerParser      : Stream -> option[Header*string],
                    [NotNull] container         : IUnityContainer)
        {
            FullPath = filePath;
            _streamFactory = streamFactory;
            _loadFunc = loadFunc;
            
            _lineIndex = LineIndex();
            _fileSearcher = fileSearcher;
            _errorPresenter = container.Resolve.[ErrorPresenter]();
            
            Loaded += (_, _) => _lineIndex.OnLoaded();

            _lineReader = lineReader;
            
            def stream = streamFactory();
            FileSize = stream.Length;
            StartTime =  _lineReader.First().Time;
            FinishTime = _lineReader.GetLastLine().Time;

            def header = using (stream = streamFactory()) headerParser(stream);
            ParsedHeader = header.Map( x => x[0] );
            Header = header.Map( x => x[1] ).WithDefault(string.Empty);
        }

        public Load(indexedLineConsumers : IEnumerable[IIndexedLineConsumer]) : void
        {
            _task = Task.Factory.StartNew(() => _loadFunc(this, indexedLineConsumers, _cancellationTokenSource.Token));
                //LoadCore.[LogGrok.Core.ILine, LogGrok.LogParserBase.IL;ineReader](indexedLineConsumers, _cancellationTokenSource.Token));
        }

        public static CreateInstance[T](
                    [NotNullOrEmpty] filePath   : string,
                    [NotNull] streamFactory     : StreamFactory,
                    [NotNull] lineReaderFactory : (void -> Stream) -> ILineReader,
                    [NotNull] fileSearcher      : FileSearcher.GetOffsetsWithTextFunction,
                    [NotNull] headerParser      : Stream -> option[Header*string],
                    [NotNull] container         : IUnityContainer,
                    beginOffset = 0l,
                    endOffset = -1l) : LogProcessor where T : ILine
       {
            def LoadFunc(logProcessor, indexedLineConsumers, cancellationToken)  
            { 
                using (lineReader = lineReaderFactory(streamFactory))
                    logProcessor.LoadCore.[T](indexedLineConsumers, lineReader, cancellationToken); 
            }
            
            def CreateSubStream()
            {
                if (beginOffset == 0l && endOffset == -1l)
                    streamFactory()
                else
                    ReadSubStream(streamFactory(), beginOffset, endOffset);
            }
            
            LogProcessor(filePath, streamFactory, lineReaderFactory(CreateSubStream), 
                LoadFunc, fileSearcher, headerParser, container);
        }
        
        public FullPath : string { get; private set; }
        public FileSize : long { get; private set; }
        public Header : string { get; private set; }
        public StartTime : TimeSpan { get; private set; }
        public FinishTime : TimeSpan { get; private set; }
        public ProcessedLineCount : int { get; private set; }            
        public LoadedPercent : double { get; private set; } // form 0 to 100
        public IsLoaded : bool { get; private set; }
        public ParsedHeader : option[Header] { get; private set; }

        public event Loaded : EventHandler;

        public GetLine(index : int) : ILine
        {
            match (ProcessedLineCount - index)
            {
                | 1 => _lineReader.ReadLineAt(_lineIndex.GetLineOffset(index), _lineIndex.LastLineOffset )
                | x when x > 0 => 
                        _lineReader.ReadLineAt(_lineIndex.GetLineOffset(index),  _lineIndex.GetLineOffset(index + 1))
                | _ => throw ArgumentOutOfRangeException($"Try get line by index $index but have only $ProcessedLineCount processed line");
            }
        }

        public GetLineWithText(text: string, options : SearchOptions, fromIndex : int) : IEnumerable[LineOrProgress]
        {
            _lineIndex.GetLineLocations(fromIndex) |> _fileSearcher(_streamFactory, text, options, _lineIndex.GetLineOffset(fromIndex))
        }        

        public Dispose() : void
        {
            _cancellationTokenSource.Cancel();
            _task.Wait();
            _lineReader.Dispose();
        }

        private static MakeEnumerablePartitions[T](source : IEnumerable[T], count : int) : IEnumerable[IEnumerable[T]]
        {
            mutable partition = List();

            foreach(item in source)
            {
                partition.Add(item);
                when (partition.Count == count)
                {
                    yield partition;
                    partition  = List();
                }
            }

            when (partition.Count >0)
                yield partition;
        }

        [TraceMethod]               
        private LoadCore[T](
            indexedLineConsumers : IEnumerable[IIndexedLineConsumer], 
            lineReader : ILineReader,
            cancellationToken : CancellationToken) : void 
                where T : ILine         
        {
            try
            {
                foreach (line in lineReader.TakeWhile(_ => !cancellationToken.IsCancellationRequested))
                {
                    def index = _lineIndex.AddNextLine(line.Offset, line.EndOffset);
                    foreach(indexedLineConsumer in indexedLineConsumers)
                    {
                        indexedLineConsumer.Process(line, index);
                    }
                    ++ProcessedLineCount;
                    LoadedPercent = (line.Offset:double) / FileSize * 100.0;
                }
                LoadedPercent  = 100;
            }
            catch 
            {
                | e is Exception => _errorPresenter.ShowError($"Load file failed : $(e.Message)");
            }
            IsLoaded = true;
            Loaded(this, EventArgs.Empty);

            foreach(consumer in indexedLineConsumers)
                consumer.Finish();
        }

        private _streamFactory : void -> Stream;
        private _loadFunc : LogProcessor*IEnumerable[IIndexedLineConsumer] * CancellationToken -> void;
        private _lineReader : ILineReader;
        private _lineIndex : LineIndex;
        private _cancellationTokenSource = CancellationTokenSource();
        private mutable _task : Task = Task.Factory.StartNew(() => {});

        private _fileSearcher : FileSearcher.GetOffsetsWithTextFunction;
        private _errorPresenter : ErrorPresenter;
    }
}
